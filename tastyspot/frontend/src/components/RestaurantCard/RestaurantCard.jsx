// src/components/RestaurantCard/RestaurantCard.js
import React, { useState, useEffect, useRef } from 'react';
import { Link } from 'react-router-dom';
import {
  FiStar, FiMapPin, FiClock, FiChevronLeft, FiChevronRight,
  FiDollarSign, FiCoffee, FiTrash2 // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ FiTrash2 –∏–∑ –∞–¥–º–∏–Ω—Å–∫–∏—Ö
} from 'react-icons/fi';
import './RestaurantCard.css';

const RestaurantCard = ({ restaurant, isAdmin, onDelete }) => {
  const {
    id, name, photo_url, cuisine_type, rating, address,
    establishment_type, working_hours, price_range,
    distance, distanceFrom
  } = restaurant;

  const photos = photo_url
    ? photo_url.split(',').map(photo => photo.trim()).filter(photo => photo)
    : [];

  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);
  const intervalRef = useRef(null);
  const [isHovered, setIsHovered] = useState(false);
  const cardRef = useRef(null);

  const renderPriceRange = () => {
    switch (price_range) {
      case '—ç–∫–æ–Ω–æ–º': return '$ (—ç–∫–æ–Ω–æ–º)';
      case '—Å—Ä–µ–¥–Ω–∏–π': return '$$ (—Å—Ä–µ–¥–Ω–∏–π)';
      case '–ø—Ä–µ–º–∏—É–º': return '$$$ (–ø—Ä–µ–º–∏—É–º)';
      default: return '–ù–µ —É–∫–∞–∑–∞–Ω';
    }
  };

  const startSlideshow = () => {
    if (photos.length <= 1 || !isHovered) return;
    stopSlideshow();
    intervalRef.current = setInterval(() => {
      setCurrentPhotoIndex(prev => (prev + 1) % photos.length);
    }, 3000);
  };

  const stopSlideshow = () => {
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
  };

  const goToNextPhoto = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setCurrentPhotoIndex(prev => (prev + 1) % photos.length);
    resetSlideshowTimer();
  };

  const goToPrevPhoto = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setCurrentPhotoIndex(prev => (prev - 1 + photos.length) % photos.length);
    resetSlideshowTimer();
  };

  const resetSlideshowTimer = () => {
    stopSlideshow();
    if (isHovered && photos.length > 1) {
        startSlideshow();
    }
  };

  useEffect(() => {
    if (isHovered && photos.length > 1) {
      startSlideshow();
    } else {
      stopSlideshow();
    }
    return stopSlideshow;
  }, [isHovered, photos.length]);

  const handleImageError = (e) => {
    e.target.onerror = null;
    e.target.src = '/placeholder-restaurant.jpg';
  };

  const formatRating = (val) => {
    const num = parseFloat(val);
    if (isNaN(num) || num === 0) return '–ù–æ–≤—ã–π';
    return num.toFixed(1);
  };

  const showDistanceFromUser = distanceFrom === "–ú–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ" && typeof distance === 'number' && distance !== null;

  const handleDeleteClick = (e) => {
    e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Å—Å—ã–ª–∫–∏)
    e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
    if (onDelete) { // –ü–†–û–í–ï–†–Ø–ï–ú, –ß–¢–û onDelete –°–£–©–ï–°–¢–í–£–ï–¢
      onDelete(id, name); // –í–´–ó–´–í–ê–ï–ú onDelete –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ê–†–ì–£–ú–ï–ù–¢–ê–ú–ò
    } else {
      // –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤ –æ—Ç–ª–∞–¥–∫–µ, –µ—Å–ª–∏ onDelete –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
      console.warn("RestaurantCard: onDelete prop is not defined!");
    }
  };

  return (
    <div
      className="restaurant-card-wrapper"
      data-is-admin={isAdmin} // –û—Å—Ç–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –≤–ª–∏—è–µ—Ç –Ω–∞ –¥—Ä—É–≥–∏–µ —Å—Ç–∏–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, rating-badge)
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      ref={cardRef}
    >
      {isAdmin && (
        <div className="restaurant-card-admin-actions">
          {/* –£–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
          <button
            type="button"
            className="restaurant-card-admin-button delete" // –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å .delete, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
            title="–£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏–µ"
            aria-label={`–£–¥–∞–ª–∏—Ç—å ${name}`}
            onClick={handleDeleteClick}
          >
            <FiTrash2 />
          </button>
        </div>
      )}

      <Link
        to={`/restaurants/${id}`}
        className="restaurant-card"
      >
        {/* ... –æ—Å—Ç–∞–ª—å–Ω–æ–π JSX –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... */}
        <div className="card-image-container">
          {photos.length > 0 ? (
            <img
              src={photos[currentPhotoIndex]}
              alt={restaurant.name}
              onError={handleImageError}
              className={`card-image ${photos.length > 1 ? 'slideshow-active' : ''}`}
              loading="lazy"
            />
          ) : (
            <img
              src="/placeholder-restaurant.jpg"
              alt={restaurant.name}
              className="card-image"
            />
          )}

          {showDistanceFromUser && (
            <div className="restaurant-card-distance-overlay">
              <FiMapPin size={12} style={{ marginRight: '4px', verticalAlign: 'middle' }} />
              {distance.toFixed(1)} –∫–º
            </div>
          )}

          {photos.length > 1 && (
            <>
              <div className="photo-counter">
                {currentPhotoIndex + 1}/{photos.length}
              </div>
              <button
                className="nav-button prev-button"
                onClick={goToPrevPhoto}
                aria-label="Previous photo"
              >
                <FiChevronLeft />
              </button>
              <button
                className="nav-button next-button"
                onClick={goToNextPhoto}
                aria-label="Next photo"
              >
                <FiChevronRight />
              </button>
            </>
          )}

          <div className="image-overlay">
            <h3 className="restaurant-title">{name}</h3>
            <div className="restaurant-type">
              <span className="type-icon" role="img" aria-label={establishment_type}>
                {getEstablishmentIcon(establishment_type)}
              </span>
              {establishment_type || '–ó–∞–≤–µ–¥–µ–Ω–∏–µ'}
            </div>
          </div>

          <span className="rating-badge">
            <FiStar className="rating-icon" />
            {formatRating(rating)}
          </span>
        </div>

        <div className="card-content">
          <div className="details">
            <p className="address">
             
              {address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}
            </p>

            {working_hours && (
              <p className="hours">
                
                {working_hours}
              </p>
            )}

            {cuisine_type && (
              <p className="cuisine">
                <FiCoffee className="detail-icon" />
                {cuisine_type}
              </p>
            )}

            {price_range && (
              <p className="price-range">
                <FiDollarSign className="detail-icon" />
                {renderPriceRange()}
              </p>
            )}
          </div>
        </div>
      </Link>
    </div>
  );
};

const getEstablishmentIcon = (type) => {
  const typeLower = type?.toLowerCase();
  const types = {
    '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': 'üçΩÔ∏è', '–∫–∞—Ñ–µ': '‚òï', '–±–∞—Ä': 'üç∏', '—Ñ–∞—Å—Ç—Ñ—É–¥': 'üçî',
    '–∫–æ—Ñ–µ–π–Ω—è': 'ü•ê', '–ø–∏—Ü—Ü–µ—Ä–∏—è': 'üçï', '—Å—Ç–æ–ª–æ–≤–∞—è': 'üç≤', '—Å—É—à–∏-–±–∞—Ä': 'üç£'
  };
  return types[typeLower] || 'üè†';
};

export default RestaurantCard;